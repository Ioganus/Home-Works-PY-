# # ПРИМЕР ЦИКЛА for
# S = 0  # заводим переменную-счетчик, в которой мы будем считать сумму
# N = 5


# # ЗАВОДИМ ЦИКЛ FOR, В КОТОРОМ МЫ БУДЕМ ПРОХОДИТЬ ПО ВСЕМ ЧИСЛАМ ОТ ОДНОГО ДО N
# for i in range(1, N + 1):  # равносильно выражению for i in [1, 2, 3, ... , N -1, N]:
#     print("Значение суммы на предыдущем шаге: ", S)
#     print("Текущее число: ", i)
#     S = S + i  # cуммируем текущее число i и перезаписываем значение суммы
#     print("Значение суммы после сложения: ", S)
#     print("---")
# print("Конец цикла")
# print()
# print("Ответ: сумма равна = ", S)


# # ПРОИЗВЕДЕНИЕ С ПОМОЩЬЮ ЦИКЛА
# #  """обратите внимание, что P = 1, это важно, потому что если бы
# # мы умножали на 0, то все произведение было бы равно 0"""
# P = 1  # заводим переменную-счетчик, в которой мы будем считать произведение
# N = 5
# # запишите цикл for для подсчета произведения
# for i in range(1, N+1):
#     P *= i
# print(P)


# # ЦИКЛ, КОТОРЫЙ БУДЕТ СКЛАДЫВАТЬ НАТУРАЛЬНЫЕ ЧИСЛА, ПОКА ИХ СУММА НЕ ПРЕВЫСИТ 500
# S = 0  # заводим переменную-счетчик, в которой мы будем считать сумму
# n = 1  # текущее натуральное число
# # заводим цикл while, который будет работать, пока сумма не превысит 500
# while S < 500:
#     S += n  # увеличиваем сумму, равносильно S = S + n
#     n += 1  # так как сумма ещё не достигла нужного значения, то увеличиваем переменную-счетчик
#     print("Ещё считаю ...")
# print("Сумма равна:", S)
# print("Количество чисел:", n)


# # ЦИКЛ КОТОРЫЙ ВОЗВОДИТ ЧИСЛА В КВАДРАТ, ПОКА РЕЗУЛЬТАТ МЕНЬШЕ 1000
# n = 1
# while n ** 2 < 1000:
#     n += 1


# # ЦИКЛ С ИСПОЛЬЗОВАНИЕМ БЕСКОНЕЧНОГО ЦИКЛА WHILЕ С ПОСТУСЛОВИЕМ, 
# # КОТОРЫЙ ВОЗВОДИТ НАТУРАЛЬНЫЕ ЧИСЛА В КВАДРАТ, ПОКА РЕЗУЛЬТАТ МЕНЬШЕ 1000
# n = 1
# while True:
#     if n ** 2 >= 1000:
#         print("Последнее число", n - 1)
#         break
#     n += 1


# # УСЛОВИЕ ЗАДАЧИ. ДАНА ДВУМЕРНАЯ МАТРИЦА 3X3. 
# # ОПРЕДЕЛИТЕ МАКСИМУМ И МИНИМУМ КАЖДОЙ СТРОКИ, А ТАКЖЕ ИХ ИНДЕКСЫ.
# random_matrix = [
# [9, 2, 1],
# [2, 5, 3],
# [4, 8, 5]
# ]
# min_value_rows = []  # здесь будут храниться минимальные значения для каждой строки
# min_index_rows = []  # здесь будут храниться индексы минимальных значений для каждой строки
# max_value_rows = []  # здесь будут храниться максимальные значения для каждой строки
# max_index_rows = []  # здесь будут храниться индексы максимальных значений для каждой строки
# for row in random_matrix:  # здесь мы целиком берем каждую сроку
#     min_index = 0  # в качестве минимального значения возьмем первый элемент строки
#     max_index = 0
#     min_value = row[min_index]  # начальное минимальное значение для каждой строки будет новое
#     max_value = row[max_index]  # для максимального значения тоже самое
#     for index_col in range(len(row)):
#         if row[index_col] < min_value:
#             min_value = row[index_col]
#             min_index = index_col
#         if row[index_col] > max_value:
#             max_value = row[index_col]
#             max_index = index_col
#     min_value_rows.append(min_value)
#     min_index_rows.append(min_index)
#     max_value_rows.append(max_value)
#     max_index_rows.append(max_index)
# print(min_value_rows)
# print(min_index_rows)
# print(max_value_rows)
# print(max_index_rows)


# # ENUMERATE
# list_ = [-5, 2, 4, 8, 12, -7, 5]
# # Функция enumerate возвращает данные в виде кортежей, 
# # где на первом месте стоит индекс, а затем значение 
# # [(0, -5), (1, 2), (2, 4), ...]
# for i, value in enumerate(list_):  
#     print("Индекс элемента: ", i)
#     print("Значение элемента: ", value)  # с помощью индекса получаем значение элемента
#     print("---")
# print("Конец цикла")


# #ЦИКЛ КОТОРSQ НАХОДИТ ИНДЕКС ПОСЛЕДНЕГО ОТРИЦАТЕЛЬНОГО ЭЛЕМЕНТА В СПИСКЕ
# list_ = [-5, 2, 4, 8, 12, -7, 5]
# # Объявим переменную, в которой будем хранить индекс отрицательного элемента
# index_negative = None
# for i, value in enumerate(list_):
#     if value < 0:
#         print("Отрицательное число: ", value)
#         index_negative = i  # перезаписываем значение индекса
#         print("Новый индекс отрицательного числа: ", index_negative)
#     else:
#         print("Положительное число: ", value)
#     print("---")
# print("Конец цикла")
# print()
# print("Ответ: индекс последнего отрицательного элемента = ", index_negative)


# #КОЛ-ВО КРОЛИКОВ И ФАЗАНОВ В КЛЕТКЕ (В ОБЩЕМ 35 ГОЛОВ И 94 НОГИ)
# heads = 35  # количество голов
# legs = 94  # количество ног
# for r in range(heads + 1):  # количество кроликов
#     for ph in range(heads + 1):  # количество фазанов
#         #  если суммарное количество голов превышено или ног превышено, то переходим на следующий шаг цикла
#         if (r + ph) > heads or \
#             (r * 4 + ph * 2) > legs: 
#             continue
#         if (r + ph) == heads and (r * 4 + ph * 2) == legs:
#             print("Количество кроликов", r)
#             print("Количество фазанов", ph)
#             print("---")


#В PYTHON ЕСТЬ ФУНКЦИЯ ALL([ ]), КОТОРАЯ ВОЗВРАЩАЕТ TRUE, ЕСЛИ ВСЕ УСЛОВИЯ, 
# ПЕРЕДАННЫЕ В АРГУМЕНТ ФУНКЦИИ В ВИДЕ СПИСКА, ЯВЛЯЮТСЯ ИСТИННЫМИ
# if all([type(a) == int,
#         100 <= a <= 999,
#         a % 2 == 0,
#         a % 3 == 0]):
#     print("Число удовлетворяет условиям")
# А ЕСЛИ НУЖНО ЧТОБЫ БЫЛ ХОТЯ БЫ ОДИН ИСТИННЫЙ 
# НА ПОМОЩЬ ПРИХОДИТ ФУНКЦИЯ ANY([ ])


# #ПРОГРАММA, КОТОРАЯ СЧИТАЕТ ПОСЛЕДОВАТЕЛЬНОСТЬ СИМВОЛОВ
# text = input() # получаем строку

# first = text[0] # сохраняем первый символ
# count = 0 # заводим счетчик
# result = '' # и результирующую строку

# for c in text:
#     if c == first: # если символ совпадает с сохраненным, 
#         count += 1 # то увеличиваем счетчик
#     else:
#         result += first + str(count) # иначе - записываем в результат
#         first = c # и обновляем сохраненный символ с его счетчиком
#         count = 1
        
# result += first + str(count) # и добавляем в результат последний символ
# print(result)